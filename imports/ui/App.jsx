import React, {Fragment, useState} from 'react';
import {Meteor} from "meteor/meteor";
import { useTracker } from 'meteor/react-meteor-data';
import { TasksCollection } from '../api/tasks/conllections/TasksCollection';
import { Task } from './components/task/Task'
import {TaskForm} from "./components/task/TaskForm";
import {LoginForm} from "./components/login/LoginForm";
import {BrowserRouter, Route, Routes} from "react-router-dom";
import {TaskPage} from "./containers/task/TaskPage";

// CheckBox ÏÑ†ÌÉù Ïó¨Î∂Ä Ï≤¥ÌÅ¨
const toggleChecked = ({ _id, isChecked}) => {
    // TasksCollection.update(_id, {
    //     $set: {
    //         isChecked: !isChecked
    //     }
    // })
    Meteor.call('tasks.setIsChecked', _id, !isChecked);
};
export const App = () => {
    const user = useTracker(() => Meteor.user());

    const [hideCompleted, setHideCompleted] = useState(false);

    const hideCompletedFilter = { isChecked: {$ne: true}}
    const userFilter = user ? { userId: user._id } : {};
    /*
    ...(Three dots) es6ÏóêÏÑú ÏÉàÎ°ú Ï∂îÍ∞ÄÎêú Î¨∏Î≤ï
    1. Three dots Ìï®ÏàòÍ∞Ä Îß§Í∞úÎ≥ÄÏàòÏùò ÎÅùÏóê ÏûàÏúºÎ©¥ "ÎÇòÎ®∏ÏßÄ Îß§Í∞ú Î≥ÄÏàò" Ïù¥Í≥† ÎÇòÎ®∏ÏßÄ Ïù∏Ïàò Î™©Î°ùÏùÑ Î∞∞Ïó¥Î°ú ÏàòÏßë
    2. Ìï®Ïàò Ìò∏Ï∂ú Îì±ÏóêÏÑú Three dots ÏÇ¨Ïö©ÌïòÎ©¥ "ÌôïÏÇ∞ Ïó∞ÏÇ∞Ïûê" ÎùºÍ≥† ÌïòÎ©∞ Î∞∞Ïó¥ÏùÑ Î™©Î°ùÏúºÎ°ú ÌôïÏû•
    Ï∞∏Í≥† ÏÇ¨Ïù¥Ìä∏
    https://godnr149.tistory.com/150
    https://dinn.github.io/javascript/js-dotdotdot/
    */
    const pendingOnlyFilter = { ...hideCompletedFilter, ...userFilter };

    const { tasks, pendingTasksCount, isLoading } = useTracker(() => {
        const noDataAvailable = { tasks: [], pendingTasksCount: 0 };
        if (!Meteor.user()){
            return noDataAvailable;
        }
        const handler = Meteor.subscribe('tasks');

        if(!handler.ready()){
            return { ...noDataAvailable, isLoading: true };
        }

        const tasks = TasksCollection.find(
            hideCompleted? pendingOnlyFilter : userFilter,
            {
                sort: { createdAt:-1 }
            }
        ).fetch();
        // let tasks1;
        // let pendingTasksCount;
        const pendingTasksCount = TasksCollection.find(pendingOnlyFilter).count();

        // const pendingTasksCount = Meteor.call('task.pendingTasksCount', pendingOnlyFilter);
        // console.log("res = " + pendingTasksCount);
        // Meteor.call('task.findAll', hideCompleted, pendingOnlyFilter, userFilter, (err, res) => {
        //     // console.log("tasks err = "+ err);
        //     console.log("tasks res = " + res);
        //     console.log('Array Iteration 1')
        //     for (let i = 0; i < res.length; i++) {
        //         console.log(res[i])
        //     }
        //     // tasks1 = res;
        // });

        // Meteor.call('task.pendingTasksCount', pendingOnlyFilter, (err, res) => {
        //     pendingTasksCount = res;
        // });

        return { tasks, pendingTasksCount };
    });


    //ÏµúÏã†ÏàúÏúºÎ°ú Ï†ïÎ†¨ sort 1: ASC, -1: DESC
    // const conllections = useTracker(() =>{
    //     if(!user){
    //         return [];
    //     }
    //     return TasksCollection.find(hideCompleted ? pendingOnlyFilter : userFilter, {
    //         sort: { createdAt: -1 },
    //     }).fetch();
    // });

    //ÌÖåÏä§ÌÅ¨ ÏÇ≠Ï†ú
    // const deleteTask = ({ _id}) => TasksCollection.remove(_id); //Í∏∞Ï°¥(ÌÖåÏä§ÌÅ¨(ÌïÑÎìú) ÏÇ≠Ï†ú)
    const deleteTask = ({ _id }) => Meteor.call('tasks.remove', _id); //Î≥ÄÍ≤Ω(ÌÖåÏä§ÌÅ¨(ÌïÑÎìú) ÏÇ≠Ï†ú)

    const pendingTasksTitle = `${
       pendingTasksCount ? `(${pendingTasksCount})` : '' 
    }`;
    const logout = () => Meteor.logout();

    return (
        <div className="app">
            <header>
                <div className="app-bar">
                    <div className="app-header">
                        <h1>üìùÔ∏è To Do List</h1>
                        {pendingTasksTitle}
                    </div>
                </div>
            </header>

            <div className="main">
                <BrowserRouter>
                    {/*<Routes>*/}
                    {/*    /!*Í∏∞Î≥∏ Î£®Ìä∏Îäî Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Ìï†Îãπ*!/*/}
                    {/*    <Route path="/" element={<LoginForm/>}/>*/}

                    {/*    <Route path="/task" element={<TaskPage/>}/>*/}
                    {/*</Routes>*/}
                    {user ?(
                        <Fragment>
                            <div className="user" onClick={logout}>
                                {user.username || user.profile.name}
                            </div>

                            <TaskForm />

                            <div className="filter">
                                <button onClick={() => setHideCompleted(!hideCompleted)}>
                                    {hideCompleted? 'Show All' : 'Hide Completed'}
                                </button>
                            </div>

                            {isLoading && <div className="loading">loading...</div> }

                            <ul className="tasks">
                                {tasks.map(task => (
                                    <Task
                                        key={task._id}
                                        task={task}
                                        onCheckboxClick={toggleChecked}
                                        onDeleteClick={deleteTask}
                                    />
                                ))}
                            </ul>
                        </Fragment>
                    ) : (
                        <LoginForm/>
                    )}
                </BrowserRouter>
            </div>
        </div>
    );
};
